@model GliglockTest.appCore.Test;


@if (User.IsInRole("Teacher"))
{
    <h3>@Model.Name</h3>
    foreach(var question in Model.Questions)
    {
        <h5>@question.Text</h5>
        if (question.WithImg)
        {
            string imgPath = $"/questionImages/{question.Id}.jpg";
            <img src="@imgPath" class="question-image" />
        }
        foreach(var option in question.AnswerOptions)
        {
            if (option.IsCorrect)
            {
                <div class="correct-answer">@option.Content</div>
            }
            else
            {
                <div>@option.Content</div>
            }
        }
    }
}
else
{
    var questionsJson = System.Text.Json.JsonSerializer.Serialize(Model.Questions);

    <div id="testing-page">
        <div id="question" class="question"></div>
        <br />
        <button onclick="previousQuestion()" class="btn navigate-button">&lt; Previous</button>
        <button onclick="nextQuestion()" class="btn navigate-button">Next ></button>
        <button onclick="finishTest()" class="btn btn-success disabled" id="submit-button">Finish Test</button>
    </div>

    <script>
        let questions = @Html.Raw(questionsJson);
        let currentQuestionIndex = 0;
        let answers = [];


        function displayQuestion(index) {
            var questionDiv = document.getElementById('question');

            questionDiv.innerHTML = '<h3>' + questions[index].Text + '</h3>';
            if (questions[index].WithImg) {
                questionDiv.innerHTML += '<img class="question-image" src="/questionImages/' + questions[index].Id + '.jpg" alt="question photo" />';
            }
            questions[index].AnswerOptions.forEach(function (option) {
                let checked = '';
                if (questions[index].HasManyAnswers) {

                    if (answers[currentQuestionIndex] && answers[currentQuestionIndex].selectedOptions.includes(option.Id)) {
                        checked = 'checked';

                    }
                    questionDiv.innerHTML += '<br> <input type="checkbox" id="' + option.Id + '" value="' + option.Content + '" name="' + questions[index].Text + '" ' + checked + ' />';
                } else {

                    if (answers[currentQuestionIndex] && answers[currentQuestionIndex].selectedOptions.includes(option.Id)) {
                        checked = 'checked';
                    }
                    questionDiv.innerHTML += '<br> <input type="radio" id="' + option.Id + '" value="' + option.Content + '" name="' + questions[index].Text + '" ' + checked + ' />';
                }
                questionDiv.innerHTML += ' <label for="' + option.Id + '">' + option.Content + '</label> <br> '
            })
            console.log('currentQuestionIndex', currentQuestionIndex);
            console.log('questions.length - 1', questions.length - 1);
            if (currentQuestionIndex == questions.length - 1) {
                let finishButton = document.getElementById('submit-button');
                finishButton.classList.remove('disabled');
            }
        }

        displayQuestion(currentQuestionIndex);
        function saveAnswer() {
            let selectedOptions = [];
            let currentQuestion = questions[currentQuestionIndex];

            if (currentQuestion.HasManyAnswers) {
                let checkboxes = document.querySelectorAll('.question input[type="checkbox"]:checked');
                checkboxes.forEach(function (checkbox) {
                    selectedOptions.push(checkbox.id);
                });
            } else {
                let radio = document.querySelector('.question input[type="radio"]:checked');
                if (radio) {
                    selectedOptions.push(radio.id);
                }
            }
            answers[currentQuestionIndex] = { questionId: currentQuestion.Id, selectedOptions: selectedOptions };
        }

        function nextQuestion() {
            saveAnswer();
            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                displayQuestion(currentQuestionIndex);
            }
        }

        function previousQuestion() {
            saveAnswer();
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion(currentQuestionIndex);
            }
        }
        function finishTest() {
            saveAnswer();

            let ajaxUrl = '';
            $.ajax({
                url: '/Tests/SubmitAnswers?testId=@Model.Id',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(answers.filter(function (answer) {
                    return answer !== undefined;
                })),
                success: function (response) {
                    console.log('Answers submitted successfully');
                    // Display the HTML response
                    $('#testing-page').html(response);
                },
                error: function (xhr, status, error) {
                    console.error('Error submitting answers: ' + error);
                }
            });

        }
    </script>
}